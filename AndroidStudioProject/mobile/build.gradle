apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.laubasthe.triviago"
        minSdkVersion 23
        targetSdkVersion 30
        // mobile versions end with .00 and watch with .01
        // [major] [minor] [fix] [internal version][77 for mobile/99 for watch]
        versionCode 100000077 // example 2 04 03 15 77
        versionName "1.0.0" //[major][minor][fix]

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    signingConfigs { // block must be above buildTypes block
        def Properties signConfigProps = new Properties()
        signConfigProps.load(new FileInputStream(file('../signconfig.properties')))
        debug {
            storeFile file(signConfigProps["debug-store"])
            storePassword signConfigProps["debug-storePass"]
            keyAlias signConfigProps["debug-keyAlias"]
            keyPassword signConfigProps["debug-keyPass"]
        }
        release {
            storeFile file(signConfigProps["deploy-store"])
            storePassword signConfigProps["deploy-storePass"]
            keyAlias signConfigProps["deploy-keyAlias"]
            keyPassword signConfigProps["deploy-keyPass"]
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
        buildTypes.each {
            project.ext.constants.each {
                    // - String constants used in Java as `BuildConfig.W_a_key`
                    // - Resources are used as usual:
                    // - in Java as:
                    // `[getApplicationContext().]getString(R.string.W_a_key)`
                    // - in XML as:
                    // `@string/W_a_key`
                k, v ->
                    it.buildConfigField 'String', "W_${k}", "\"${v}\""
                    it.resValue 'string', "W_${k}", v
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:28.3.1')
    // Declare the dependency for the Firebase Authentication and Database library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-database'
    implementation 'com.google.firebase:firebase-auth'
    // Comme App Check est actuellement en version bêta, ce n'est pas inclus dans le
    // Firebase BoM . Vous devez spécifier le numéro de version complet lorsque
    // vous déclarez la dépendance App Check.
    implementation 'com.google.firebase:firebase-appcheck-safetynet:16.0.0-beta02'
    // for local app checks within emulator :
    implementation 'com.google.firebase:firebase-appcheck-debug:16.0.0-beta02'

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'com.google.android.material:material:1.4.0'

    implementation 'com.google.android.gms:play-services-maps:17.0.1'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.maps.android:android-maps-utils:2.2.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // This is for RetrofitAPI
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'

    // wearservice
    implementation 'com.google.android.gms:play-services-wearable:17.1.0'
}